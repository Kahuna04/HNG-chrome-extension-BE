const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Connect to your MongoDB database
mongoose.connect('mongodb://localhost/mydatabase');
const connection = mongoose.connection;
autoIncrement.initialize(connection);

// Define the person schema with auto-incrementing user_id
const personSchema = new mongoose.Schema({
    user_id: { type: Number, unique: true },
    name: String,
    age: Number,
    email: String,
});

personSchema.plugin(autoIncrement.plugin, { model: 'Person', field: 'user_id' });

const Person = mongoose.model('Person', personSchema);

// Sample data 
let person = ['Kahuna'];

// Create a new person (without specifying user_id)
app.post('/api/persons', async (req, res) => {
    const { name, age, email } = req.body;
    if (!name) {
        return res.status(400).json({ error: 'Name is required' });
    }

    try {
        // Create a new person with auto-generated user_id
        const person = new Person({ name, age, email });
        await person.save();
        res.status(201).json(person);
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
    }
});

// Get person by user_id
app.get('/api/user_id', async (req, res) => {
    const { user_id } = req.params;
    console.log(`Requested user_id: ${user_id}`);
try {
        const person = await Person.findOne({ user_id });
        console.log('Person found:', person);

        const formattedResponse = {
            id: person.user_id,
            name: person.name,
        };

        res.json(formattedResponse);
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
    }
});

// Update person by user_id
app.put('/api/persons/:user_id', async (req, res) => {
    const { user_id } = req.params;
    const { name, age, email } = req.body;
    try {
        const person = await Person.findOneAndUpdate({ user_id }, { name, age, email }, { new: true });
        if (!person) {
            return res.status(404).json({ error: 'Person not found' });
        }
        res.json(person);
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
    }
});

// Delete person by user_id
app.delete('/api/user_id', async (req, res) => {
    const { user_id } = req.params;
    try {
        const person = await Person.findOneAndRemove({ user_id });
        if (!person) {
            return res.status(404).json({ error: 'Person not found' });
        }
        res.json(person);
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
    }
});

// Provide a basic description of the API
app.get('/api', (req, res) => {
    res.json({
        message: 'Welcome to the Person API!',
    });
});

app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});

